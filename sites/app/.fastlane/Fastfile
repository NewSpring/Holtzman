# Customise this file, documentation can be found here:
# https://github.com/KrauseFx/fastlane/tree/master/docs
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.87.1"

default_platform :ios


platform :ios do

  before_all do
    ENV['KEYCHAIN_NAME'] = "TempKeychain.keychain"
  end

  private_lane :build_app_production do
    sigh(
      app_identifier: ENV['APP_IDENTIFIER'],
      username: ENV['APPLE_ID']
    )

    update_project_provisioning(
      xcodeproj: ENV['XCODE_PROJECT'],
      profile: lane_context[SharedValues::SIGH_PROFILE_PATH],
      target_filter: ENV['XCODE_SCHEME_NAME'],
      build_configuration: "Release"
    )

    gym(
      scheme: ENV['XCODE_SCHEME_NAME'],
      project: ENV['XCODE_PROJECT'],
      include_bitcode: false
    )
  end

  private_lane :build_app_ad_hoc do
    sigh(
      app_identifier: ENV['APP_IDENTIFIER'],
      username: ENV['APPLE_ID'],
      adhoc: true,
      skip_certificate_verification: true
    )

    update_project_provisioning(
      xcodeproj: ENV['XCODE_PROJECT'],
      profile: lane_context[SharedValues::SIGH_PROFILE_PATH],
      target_filter: ENV['XCODE_SCHEME_NAME'],
      build_configuration: "Release"
    )

    gym(
      use_legacy_build_api: true,
      scheme: ENV['XCODE_SCHEME_NAME'],
      project: ENV['XCODE_PROJECT'],
      include_bitcode: false,
      export_method: "ad-hoc"
    )
  end

  desc "Runs all the tests"
  lane :test do
    snapshot
  end

  desc "Just build the app"
  lane :build do
    build_app_production
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    # snapshot

    import_certificates

    build_app_production

    pilot(
      username: ENV['APPLE_ID']
    )
  end

  desc "Submit a new Beta Build to Hockey"
  desc "This will also make sure the profile is up to date"
  lane :hockey do
    # snapshot

    import_certificates

    build_app_ad_hoc

    hockey(
      api_token: ENV['IOS_HOCKEY_TOKEN'],
      notify: "0",
      status: "1"
    )
  end

  desc "Deploy a new version to the App Store"
  desc "** Full Markdown** Support: `code`"
  lane :deploy do
    # snapshot

    build_app_production

    deliver(
      username: ENV['APPLE_ID'],
      force: true
    )
    # frameit
  end

  after_all do |lane|
    slack(
      message: "App successfully released through: #{lane}",
      channel: ENV['SLACK_ROOM'],
      slack_url: ENV['SLACK_URL']
    )
  end

  error do |lane, exception|
    slack(
      message: "Lane #{lane} failed! #{exception}",
      channel: ENV['SLACK_ROOM'],
      slack_url: ENV['SLACK_URL'],
      success: false
    )
  end

  def import_certificates
    return unless Helper.is_ci? # As in my local machine I don't need to import the certificates, only run if it's in the CI

    create_keychain(
      name: ENV["KEYCHAIN_NAME"],
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: true,
      password: ENV["KEYCHAIN_PASSWORD"]
    )

    import_certificate(
      certificate_path: ENV['CERT_KEY_PATH'],
      certificate_password: ENV['CERT_PASSWORD'],
      keychain_name: ENV["KEYCHAIN_NAME"]
    )

  end
end


# More information about multiple platforms in fastlane:
# https://github.com/KrauseFx/fastlane/blob/master/docs/Platforms.md
