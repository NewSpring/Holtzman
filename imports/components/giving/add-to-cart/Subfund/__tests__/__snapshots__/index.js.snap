// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SubFund sets the state to active if it has an amount 1`] = `
<SubFund
  accounts={
    Array [
      Object {
        "value": "main fund",
      },
    ]
  }
  amount={10}
  changeAmount={[Function]}
  changeFund={[Function]}
  preFill={[Function]}
>
  <Layout
    accounts={
      Array [
        Object {
          "value": "main fund",
        },
      ]
    }
    active={true}
    changeAmount={[Function]}
    changeFund={[Function]}
    fundId={undefined}
    preFill={[Function]}
    selectVal={undefined}
  >
    <div>
      <div
        className="display-inline-block push-half-bottom h3 push-half-right text-dark-primary"
      >
        and give
      </div>
      <Input
        classes={
          Array [
            "soft-bottom",
            "input--active",
            "display-inline-block",
          ]
        }
        defaultValue={undefined}
        format={[Function]}
        hideLabel={true}
        inputClasses="outlined--dotted outlined--light h3 hard-top flush-bottom text-brand show-placeholder_11ef8g5"
        pattern="[0-9]*"
        placeholder="0.00"
        step="0.01"
        style={
          Object {
            "maxWidth": "165px",
            "paddingLeft": ".8em",
          }
        }
        type="number"
        value={undefined}
      >
        <div
          className="input soft-bottom input--active display-inline-block"
          data-spec="input-wrapper"
          style={
            Object {
              "maxWidth": "165px",
              "paddingLeft": ".8em",
            }
          }
        >
          <RenderLabel
            disabled={undefined}
            hideLabel={true}
            id={undefined}
            label={undefined}
            name={undefined}
            style={undefined}
          />
          <span
            className="
        dollar--icon
        hard-top
        flush-bottom
        text-brand"
            style={
              Object {
                "color": "#858585",
              }
            }
          >
            <input
              autoCapitalize="on"
              autoComplete="on"
              autoCorrect="on"
              className="outlined--dotted outlined--light h3 hard-top flush-bottom text-brand show-placeholder_11ef8g5"
              data-lpignore={undefined}
              data-spec="input"
              defaultValue={undefined}
              disabled={undefined}
              id={undefined}
              maxLength=""
              name={undefined}
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              pattern="[0-9]*"
              placeholder="0.00"
              readOnly={undefined}
              spellCheck={undefined}
              step="0.01"
              style={
                Object {
                  "maxWidth": "165px",
                  "paddingLeft": ".8em",
                }
              }
              type="number"
            />
          </span>
        </div>
      </Input>
      <div
        className="display-block"
      >
        <h3
          className="text-dark-primary push-half-bottom push-half-right display-inline-block"
        >
          to
        </h3>
        <Select
          classes={
            Array [
              "soft-bottom",
              "display-inline-block",
              "select_1rryh47",
            ]
          }
          defaultValue="main fund"
          hideLabel={true}
          includeBlank={true}
          inputClasses="text-brand outlined--dotted outlined--light h3 hard-top flush-bottom"
          items={
            Array [
              Object {
                "value": "main fund",
              },
            ]
          }
          onChange={[Function]}
          placeholder="select fund"
          selected={undefined}
        >
          <div
            className="input input--active soft-bottom display-inline-block select_1rryh47 select_e8htpf"
          >
            <select
              className="text-brand outlined--dotted outlined--light h3 hard-top flush-bottom"
              defaultValue="main fund"
              disabled={undefined}
              id={undefined}
              name={undefined}
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              placeholder="select fund"
              style={undefined}
            >
              <option
                style={
                  Object {
                    "display": "none",
                  }
                }
              >
                select fund
              </option>
              <option
                className={undefined}
                key="0"
                value="main fund"
              >
                main fund
              </option>
            </select>
          </div>
        </Select>
      </div>
    </div>
  </Layout>
</SubFund>
`;

exports[`SubFund should render a primary fund 1`] = `
<SubFund
  accounts={
    Array [
      Object {
        "value": "main fund",
      },
    ]
  }
  changeAmount={[Function]}
  changeFund={[Function]}
  preFill={[Function]}
  primary={true}
>
  <Primary
    accounts={
      Array [
        Object {
          "value": "main fund",
        },
      ]
    }
    active={false}
    changeAmount={[Function]}
    changeFund={[Function]}
    fundId={undefined}
    preFill={[Function]}
    selectVal={undefined}
  >
    <div>
      <h3
        className="text-dark-primary display-inline-block push-half-bottom push-half-right"
      >
        I'd like to give
      </h3>
      <Input
        classes={
          Array [
            "soft-bottom",
            "input--active",
            "display-inline-block",
          ]
        }
        defaultValue={undefined}
        format={[Function]}
        hideLabel={true}
        inputClasses="outlined--dotted outlined--light h3 hard-top flush-bottom text-brand show-placeholder_11ef8g5"
        pattern="[0-9]*"
        placeholder="0.00"
        step="0.01"
        style={
          Object {
            "maxWidth": "165px",
          }
        }
        type="number"
      >
        <div
          className="input soft-bottom input--active display-inline-block"
          data-spec="input-wrapper"
          style={
            Object {
              "maxWidth": "165px",
            }
          }
        >
          <RenderLabel
            disabled={undefined}
            hideLabel={true}
            id={undefined}
            label={undefined}
            name={undefined}
            style={undefined}
          />
          <span
            className="
        dollar--icon
        hard-top
        flush-bottom
        text-brand"
            style={
              Object {
                "color": "#858585",
              }
            }
          >
            <input
              autoCapitalize="on"
              autoComplete="on"
              autoCorrect="on"
              className="outlined--dotted outlined--light h3 hard-top flush-bottom text-brand show-placeholder_11ef8g5"
              data-lpignore={undefined}
              data-spec="input"
              defaultValue={undefined}
              disabled={undefined}
              id={undefined}
              maxLength=""
              name={undefined}
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              pattern="[0-9]*"
              placeholder="0.00"
              readOnly={undefined}
              spellCheck={undefined}
              step="0.01"
              style={
                Object {
                  "maxWidth": "165px",
                  "paddingLeft": ".8em",
                }
              }
              type="number"
            />
          </span>
        </div>
      </Input>
      <h3
        className="text-dark-primary display-inline-block push-half-bottom push-half-right"
      >
        to
      </h3>
      <style>
        .input--active select { color: #6bac43 }
      </style>
      <Select
        classes={
          Array [
            "soft-bottom",
            "display-inline-block",
            "select_1rryh47",
          ]
        }
        hideLabel={true}
        inputClasses="text-dark-tertiary outlined--dotted outlined--light h3 hard-top flush-bottom"
        items={
          Array [
            Object {
              "value": "main fund",
            },
          ]
        }
        name="select-account"
        onChange={[Function]}
        placeholder="select fund"
        selected={undefined}
      >
        <div
          className="input soft-bottom display-inline-block select_1rryh47 select_e8htpf"
        >
          <select
            className="text-dark-tertiary outlined--dotted outlined--light h3 hard-top flush-bottom"
            disabled={undefined}
            id="select-account"
            name="select-account"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            placeholder="select fund"
            style={undefined}
          >
            <option
              style={
                Object {
                  "display": "none",
                }
              }
            >
              select fund
            </option>
            <option
              className={undefined}
              key="0"
              value="main fund"
            >
              main fund
            </option>
          </select>
        </div>
      </Select>
    </div>
  </Primary>
</SubFund>
`;

exports[`SubFund should render with minimal props 1`] = `
<SubFund
  accounts={
    Array [
      Object {
        "value": "main fund",
      },
    ]
  }
  changeAmount={[Function]}
  changeFund={[Function]}
  preFill={[Function]}
>
  <Layout
    accounts={
      Array [
        Object {
          "value": "main fund",
        },
      ]
    }
    active={true}
    changeAmount={[Function]}
    changeFund={[Function]}
    fundId={undefined}
    preFill={[Function]}
    selectVal={undefined}
  >
    <div>
      <div
        className="display-inline-block push-half-bottom h3 push-half-right text-dark-primary"
      >
        and give
      </div>
      <Input
        classes={
          Array [
            "soft-bottom",
            "input--active",
            "display-inline-block",
          ]
        }
        defaultValue={undefined}
        format={[Function]}
        hideLabel={true}
        inputClasses="outlined--dotted outlined--light h3 hard-top flush-bottom text-brand show-placeholder_11ef8g5"
        pattern="[0-9]*"
        placeholder="0.00"
        step="0.01"
        style={
          Object {
            "maxWidth": "165px",
            "paddingLeft": ".8em",
          }
        }
        type="number"
        value={undefined}
      >
        <div
          className="input soft-bottom input--active display-inline-block"
          data-spec="input-wrapper"
          style={
            Object {
              "maxWidth": "165px",
              "paddingLeft": ".8em",
            }
          }
        >
          <RenderLabel
            disabled={undefined}
            hideLabel={true}
            id={undefined}
            label={undefined}
            name={undefined}
            style={undefined}
          />
          <span
            className="
        dollar--icon
        hard-top
        flush-bottom
        text-brand"
            style={
              Object {
                "color": "#858585",
              }
            }
          >
            <input
              autoCapitalize="on"
              autoComplete="on"
              autoCorrect="on"
              className="outlined--dotted outlined--light h3 hard-top flush-bottom text-brand show-placeholder_11ef8g5"
              data-lpignore={undefined}
              data-spec="input"
              defaultValue={undefined}
              disabled={undefined}
              id={undefined}
              maxLength=""
              name={undefined}
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              pattern="[0-9]*"
              placeholder="0.00"
              readOnly={undefined}
              spellCheck={undefined}
              step="0.01"
              style={
                Object {
                  "maxWidth": "165px",
                  "paddingLeft": ".8em",
                }
              }
              type="number"
            />
          </span>
        </div>
      </Input>
      <div
        className="display-block"
      >
        <h3
          className="text-dark-primary push-half-bottom push-half-right display-inline-block"
        >
          to
        </h3>
        <Select
          classes={
            Array [
              "soft-bottom",
              "display-inline-block",
              "select_1rryh47",
            ]
          }
          defaultValue="main fund"
          hideLabel={true}
          includeBlank={true}
          inputClasses="text-brand outlined--dotted outlined--light h3 hard-top flush-bottom"
          items={
            Array [
              Object {
                "value": "main fund",
              },
            ]
          }
          onChange={[Function]}
          placeholder="select fund"
          selected={undefined}
        >
          <div
            className="input input--active soft-bottom display-inline-block select_1rryh47 select_e8htpf"
          >
            <select
              className="text-brand outlined--dotted outlined--light h3 hard-top flush-bottom"
              defaultValue="main fund"
              disabled={undefined}
              id={undefined}
              name={undefined}
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              placeholder="select fund"
              style={undefined}
            >
              <option
                style={
                  Object {
                    "display": "none",
                  }
                }
              >
                select fund
              </option>
              <option
                className={undefined}
                key="0"
                value="main fund"
              >
                main fund
              </option>
            </select>
          </div>
        </Select>
      </div>
    </div>
  </Layout>
</SubFund>
`;

exports[`withRedux should include all the give actions 1`] = `
Object {
  "addTransactions": [Function],
  "clear": [Function],
  "clearAccount": [Function],
  "clearAllSchedulesExcept": [Function],
  "clearData": [Function],
  "clearSchedule": [Function],
  "clearSchedules": [Function],
  "clearTransaction": [Function],
  "clearTransactions": [Function],
  "deleteRecoverableSchedules": [Function],
  "deleteSchedule": [Function],
  "error": [Function],
  "fix": [Function],
  "loading": [Function],
  "next": [Function],
  "previous": [Function],
  "removeSchedule": [Function],
  "reset": [Function],
  "save": [Function],
  "saveSchedule": [Function],
  "saveSchedules": [Function],
  "setAccount": [Function],
  "setAccounts": [Function],
  "setDetails": [Function],
  "setErrors": [Function],
  "setProgress": [Function],
  "setRecoverableSchedule": [Function],
  "setReminder": [Function],
  "setState": [Function],
  "setTransactionType": [Function],
  "setUserId": [Function],
  "submit": [Function],
  "types": Object {
    "ADD_TRANSACTION": "GIVE.ADD_TRANSACTION",
    "CLEAR_DATA": "GIVE.CLEAR_DATA",
    "CLEAR_SCHEDULES": "GIVE.CLEAR_SCHEDULES",
    "CLEAR_SCHEDULES_EXCEPT": "GIVE.CLEAR_SCHEDULES_EXCEPT",
    "CLEAR_TRANSACTION": "GIVE.CLEAR_TRANSACTION",
    "CLEAR_TRANSACTIONS": "GIVE.CLEAR_TRANSACTIONS",
    "DELETE_RECOVERABLE_SCHEDULE": "GIVE.DELETE_RECOVERABLE_SCHEDULE",
    "DELETE_RECOVERABLE_SCHEDULES": "GIVE.DELETE_RECOVERABLE_SCHEDULES",
    "REMOVE_DATA": "GIVE.REMOVE_DATA",
    "REMOVE_ERROR": "GIVE.REMOVE_ERROR",
    "REMOVE_SCHEDULE": "GIVE.REMOVE_SCHEDULE",
    "REMOVE_SCHEDULE_DATA": "GIVE.REMOVE_SCHEDULE_DATA",
    "SAVE_DATA": "GIVE.SAVE_DATA",
    "SAVE_SCHEDULES": "GIVE.SAVE_SCHEDULES",
    "SAVE_SCHEDULE_DATA": "GIVE.SAVE_SCHEDULE_DATA",
    "SET_ACCOUNTS": "GIVE.SET_ACCOUNTS",
    "SET_ERROR": "GIVE.SET_ERROR",
    "SET_ERRORS": "GIVE.SET_ERRORS",
    "SET_PROGRESS": "GIVE.SET_PROGRESS",
    "SET_RECOVERABLE_SCHEDULE": "GIVE.SET_RECOVERABLE_SCHEDULE",
    "SET_RECOVERABLE_SCHEDULES": "GIVE.SET_RECOVERABLE_SCHEDULES",
    "SET_REMINDER_DATE": "GIVE.SET_REMINDER_DATE",
    "SET_SAVED_ACCOUNT": "GIVE.SET_SAVED_ACCOUNT",
    "SET_STATE": "GIVE.SET_STATE",
    "SET_SUCCESS": "GIVE.SET_SUCCESS",
    "SET_TRANSACTION_DETAILS": "GIVE.SET_TRANSACTION_DETAILS",
    "SET_TRANSACTION_TYPE": "GIVE.SET_TRANSACTION_TYPE",
    "SET_USERID": "GIVE.SET_USERID",
    "STEP_PROGRESS": "GIVE.STEP_PROGRESS",
  },
}
`;
