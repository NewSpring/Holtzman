// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`getArtworkClasses returns default classes if short 1`] = `"one-whole overlay--gradient background--fill overlay-color--ff0000"`;

exports[`getArtworkClasses returns ratio classes if not short 1`] = `"one-whole overlay--gradient background--fill overlay-color--ff0000 ratio--square"`;

exports[`getArtworkContainerStyles returns styles object if short 1`] = `
Object {
  "backgroundImage": "
        url('http://test.com/1x1.blur.jpg')
      ",
  "backgroundSize": "cover",
  "height": "100%",
  "paddingBottom": "10px",
  "paddingTop": "10px",
}
`;

exports[`getArtworkStyles returns regular styles if not short 1`] = `
Object {
  "backgroundImage": "url('http://test.com/1x1.jpg')",
}
`;

exports[`getArtworkStyles short styles if short 1`] = `
Object {
  "backgroundColor": "transparent",
  "backgroundImage": "url('http://test.com/1x1.jpg')",
  "backgroundSize": "contain",
  "height": "1px",
}
`;

exports[`hackBackgroundStyles returns style object 1`] = `[Function]`;

exports[`renders with props 1`] = `
<div
  style={
    Object {
      "backgroundColor": "#ff0000",
      "height": "100%",
    }
  }
>
  <div
    className="overlay-color--ff0000"
    style={
      Object {
        "height": "100%",
        "left": 0,
        "position": "absolute",
        "top": 0,
        "width": "100%",
        "zIndex": -1,
      }
    }
  />
  <style>
    
    .overlay-color--ff0000:after{
      background: linear-gradient(
        to bottom, rgba(255, 0, 0, 0) 0%, #ff0000 100%
      );
    }
  
  </style>
  <style>
    
    .overlay-color--ff0000 {
      background-color: #ff0000;
    }
  
  </style>
  <div
    className="player-flex_ucdycx player-container_1uu1wdg"
  >
    <section
      className="hard"
      style={Object {}}
    >
      <div
        className="one-whole overlay--gradient background--fill overlay-color--ff0000 ratio--square"
        style={
          Object {
            "backgroundImage": "url('http://test.com/1x1.jpg')",
          }
        }
      />
    </section>
    <div
      className="text-center soft-sides player-flex-one_e0s8li"
    >
      <AudioTitle
        albumTitle="test album"
        artistName="track artist"
        channelName="music"
        isLight={false}
        isPlaying={false}
      />
      <Connect(AudioControlsWithoutData)
        audio={
          Object {
            "audio": Object {
              "order": "default",
              "playing": Object {
                "album": Object {
                  "title": null,
                },
              },
              "repeat": "default",
              "state": "default",
            },
            "data": Object {
              "content": Object {
                "images": Array [
                  Object {
                    "fileLabel": "1:1",
                    "url": "http://test.com/1x1.jpg",
                  },
                  Object {
                    "fileLabel": "1:1",
                    "url": "http://test.com/1x1.blur.jpg",
                  },
                ],
              },
              "entryId": "2",
              "title": "test title",
              "tracks": Array [
                Object {},
                Object {},
              ],
            },
            "dispatch": [Function],
            "header": Object {
              "visible": true,
            },
            "pause": [Function],
            "play": [Function],
            "playing": Object {
              "album": Object {
                "artist": "album artist",
                "channelName": "music",
                "content": Object {
                  "colors": Array [
                    Object {
                      "description": "primary",
                      "value": "ff0000",
                    },
                  ],
                  "images": Array [
                    Object {
                      "fileLabel": "1:1",
                      "url": "http://test.com/1x1.jpg",
                    },
                    Object {
                      "fileLabel": "1:1",
                      "url": "http://test.com/1x1.blur.jpg",
                    },
                  ],
                  "isLight": false,
                },
                "title": "test album",
              },
              "track": Object {
                "artist": "track artist",
              },
            },
            "repeat": "default",
            "repeatOne": [Function],
            "resetOrder": [Function],
            "resetRepeat": [Function],
            "setPlaying": [Function],
            "setPlaylist": [Function],
            "shuffle": [Function],
            "state": "default",
          }
        }
        isLight={false}
      />
    </div>
  </div>
</div>
`;

exports[`renders without color 1`] = `
<div
  style={
    Object {
      "height": "100%",
    }
  }
>
  <div
    className="overlay-color--000"
    style={
      Object {
        "height": "100%",
        "left": 0,
        "position": "absolute",
        "top": 0,
        "width": "100%",
        "zIndex": -1,
      }
    }
  />
  <style>
    
    .overlay-color--000:after{
      background: linear-gradient(
        to bottom, rgba(0, 0, 0, 0) 0%, #000 100%
      );
    }
  
  </style>
  <style>
    
    .overlay-color--000 {
      background-color: #000;
    }
  
  </style>
  <div
    className="player-flex_ucdycx player-container_1uu1wdg"
  >
    <section
      className="hard"
      style={Object {}}
    >
      <div
        className="one-whole overlay--gradient background--fill overlay-color--000 ratio--square"
        style={
          Object {
            "backgroundImage": "url('http://test.com/1x1.jpg')",
          }
        }
      />
    </section>
    <div
      className="text-center soft-sides player-flex-one_e0s8li"
    >
      <AudioTitle
        albumTitle="test album"
        artistName="track artist"
        channelName="music"
        isLight={false}
        isPlaying={false}
      />
      <Connect(AudioControlsWithoutData)
        audio={
          Object {
            "audio": Object {
              "order": "default",
              "playing": Object {
                "album": Object {
                  "title": null,
                },
              },
              "repeat": "default",
              "state": "default",
            },
            "data": Object {
              "content": Object {
                "images": Array [
                  Object {
                    "fileLabel": "1:1",
                    "url": "http://test.com/1x1.jpg",
                  },
                  Object {
                    "fileLabel": "1:1",
                    "url": "http://test.com/1x1.blur.jpg",
                  },
                ],
              },
              "entryId": "2",
              "title": "test title",
              "tracks": Array [
                Object {},
                Object {},
              ],
            },
            "dispatch": [Function],
            "header": Object {
              "visible": true,
            },
            "pause": [Function],
            "play": [Function],
            "playing": Object {
              "album": Object {
                "artist": "album artist",
                "channelName": "music",
                "content": Object {
                  "colors": null,
                  "images": Array [
                    Object {
                      "fileLabel": "1:1",
                      "url": "http://test.com/1x1.jpg",
                    },
                    Object {
                      "fileLabel": "1:1",
                      "url": "http://test.com/1x1.blur.jpg",
                    },
                  ],
                  "isLight": false,
                },
                "title": "test album",
              },
              "track": Object {
                "artist": "track artist",
              },
            },
            "repeat": "default",
            "repeatOne": [Function],
            "resetOrder": [Function],
            "resetRepeat": [Function],
            "setPlaying": [Function],
            "setPlaylist": [Function],
            "shuffle": [Function],
            "state": "default",
          }
        }
        isLight={false}
      />
    </div>
  </div>
</div>
`;
