exports[`SubFund sets the state to active if it has an amount 1`] = `
<SubFund accounts={{...}} preFill={[Function]} amount={10}>
  <Layout accounts={{...}} active={true} changeAmount={[Function]} fundId={[undefined]} preFill={[Function]} changeFund={[Function]} selectVal={[undefined]}>
    <div>
      <div className="display-inline-block push-half-bottom h3 push-half-right text-dark-tertiary">
        and give to
      </div>
      <Select classes={{...}} inputClasses="text-dark-tertiary outlined--dotted outlined--light h3 hard-top flush-bottom" items={{...}} onChange={[Function]} placeholder="select fund" selected={[undefined]} deselect={true} hideLabel={true} includeBlank={true}>
        <div className="input soft-bottom display-inline-block select_1rryh47 select_15p0e27">
          <select id={[undefined]} placeholder="select fund" name={[undefined]} className="text-dark-tertiary outlined--dotted outlined--light h3 hard-top flush-bottom" disabled={[undefined]} onFocus={[Function]} onChange={[Function]} defaultValue={[undefined]} value={[undefined]}>
            <option style={{...}}>
              select fund
            </option>
            <option />
            <option className={[undefined]} value="main fund">
              main fund
            </option>
          </select>
        </div>
      </Select>
      <div className="display-block">
        <h3 className="text-dark-tertiary push-half-bottom push-half-right display-inline-block">
          with
        </h3>
        <Input classes={{...}} defaultValue={[undefined]} format={[Function]} hideLabel={true} inputClasses="outlined--dotted outlined--light h3 hard-top flush-bottom text-dark-primary show-placeholder_1bkmqm1" placeholder="$0.00" style={{...}} type="tel" value={[undefined]}>
          <div className="input soft-bottom input--active display-inline-block" style={{...}} data-spec="input-wrapper">
            <RenderLabel hideLabel={true} id={[undefined]} name={[undefined]} label={[undefined]} disabled={[undefined]} />
            <input id={[undefined]} type="tel" placeholder="$0.00" name={[undefined]} className="outlined--dotted outlined--light h3 hard-top flush-bottom text-dark-primary show-placeholder_1bkmqm1" disabled={[undefined]} onBlur={[Function]} onFocus={[Function]} onChange={[Function]} defaultValue={[undefined]} style={{...}} maxLength="" data-spec="input" />
          </div>
        </Input>
      </div>
    </div>
  </Layout>
</SubFund>
`;

exports[`SubFund should render a primary fund 1`] = `
<SubFund accounts={{...}} preFill={[Function]} primary={true}>
  <Primary accounts={{...}} active={false} changeAmount={[Function]} fundId={[undefined]} preFill={[Function]} changeFund={[Function]} selectVal={[undefined]}>
    <div>
      <h3 className="text-dark-tertiary display-inline-block push-half-bottom push-half-right">
        I&#39;d like to give
      </h3>
      <Input hideLabel={true} type="tel" classes={{...}} inputClasses="outlined--dotted outlined--light h3 hard-top flush-bottom text-dark-primary show-placeholder_1bkmqm1" placeholder="$0.00" format={[Function]} defaultValue={[undefined]} style={{...}}>
        <div className="input soft-bottom input--active display-inline-block" style={{...}} data-spec="input-wrapper">
          <RenderLabel hideLabel={true} id={[undefined]} name={[undefined]} label={[undefined]} disabled={[undefined]} />
          <input id={[undefined]} type="tel" placeholder="$0.00" name={[undefined]} className="outlined--dotted outlined--light h3 hard-top flush-bottom text-dark-primary show-placeholder_1bkmqm1" disabled={[undefined]} onBlur={[Function]} onFocus={[Function]} onChange={[Function]} defaultValue={[undefined]} style={{...}} maxLength="" data-spec="input" />
        </div>
      </Input>
      <h3 className="text-dark-tertiary display-inline-block push-half-bottom push-half-right">
        to
      </h3>
      <Select items={{...}} name="select-account" hideLabel={true} classes={{...}} inputClasses="text-light-tertiary outlined--dotted outlined--light h3 hard-top flush-bottom" placeholder="select fund" onChange={[Function]} selected={[undefined]}>
        <div className="input soft-bottom display-inline-block select_1rryh47 select_15p0e27">
          <select id="select-account" placeholder="select fund" name="select-account" className="text-light-tertiary outlined--dotted outlined--light h3 hard-top flush-bottom" disabled={[undefined]} onFocus={[Function]} onChange={[Function]} defaultValue={[undefined]} value={[undefined]}>
            <option style={{...}}>
              select fund
            </option>
            <option className={[undefined]} value="main fund">
              main fund
            </option>
          </select>
        </div>
      </Select>
    </div>
  </Primary>
</SubFund>
`;

exports[`SubFund should render with minimal props 1`] = `
<SubFund accounts={{...}} preFill={[Function]}>
  <Layout accounts={{...}} active={false} changeAmount={[Function]} fundId={[undefined]} preFill={[Function]} changeFund={[Function]} selectVal={[undefined]}>
    <div>
      <div className="display-inline-block push-half-bottom h3 push-half-right text-light-tertiary">
        and give to
      </div>
      <Select classes={{...}} inputClasses="text-light-tertiary outlined--dotted outlined--light h3 hard-top flush-bottom" items={{...}} onChange={[Function]} placeholder="select fund" selected={[undefined]} deselect={true} hideLabel={true} includeBlank={true}>
        <div className="input soft-bottom display-inline-block select_1rryh47 select_15p0e27">
          <select id={[undefined]} placeholder="select fund" name={[undefined]} className="text-light-tertiary outlined--dotted outlined--light h3 hard-top flush-bottom" disabled={[undefined]} onFocus={[Function]} onChange={[Function]} defaultValue={[undefined]} value={[undefined]}>
            <option style={{...}}>
              select fund
            </option>
            <option />
            <option className={[undefined]} value="main fund">
              main fund
            </option>
          </select>
        </div>
      </Select>
    </div>
  </Layout>
</SubFund>
`;

exports[`withRedux should include all the give actions 1`] = `
Object {
  "addTransactions": [Function],
  "clear": [Function],
  "clearAccount": [Function],
  "clearAllSchedulesExcept": [Function],
  "clearData": [Function],
  "clearSchedule": [Function],
  "clearSchedules": [Function],
  "clearTransaction": [Function],
  "clearTransactions": [Function],
  "deleteRecoverableSchedules": [Function],
  "deleteSchedule": [Function],
  "error": [Function],
  "fix": [Function],
  "loading": [Function],
  "next": [Function],
  "previous": [Function],
  "removeSchedule": [Function],
  "reset": [Function],
  "save": [Function],
  "saveSchedule": [Function],
  "saveSchedules": [Function],
  "setAccount": [Function],
  "setAccounts": [Function],
  "setDetails": [Function],
  "setErrors": [Function],
  "setProgress": [Function],
  "setRecoverableSchedule": [Function],
  "setReminder": [Function],
  "setState": [Function],
  "setTransactionType": [Function],
  "setUserId": [Function],
  "submit": [Function],
  "types": Object {
    "ADD_TRANSACTION": "GIVE.ADD_TRANSACTION",
    "CLEAR_DATA": "GIVE.CLEAR_DATA",
    "CLEAR_SCHEDULES": "GIVE.CLEAR_SCHEDULES",
    "CLEAR_SCHEDULES_EXCEPT": "GIVE.CLEAR_SCHEDULES_EXCEPT",
    "CLEAR_TRANSACTION": "GIVE.CLEAR_TRANSACTION",
    "CLEAR_TRANSACTIONS": "GIVE.CLEAR_TRANSACTIONS",
    "DELETE_RECOVERABLE_SCHEDULE": "GIVE.DELETE_RECOVERABLE_SCHEDULE",
    "DELETE_RECOVERABLE_SCHEDULES": "GIVE.DELETE_RECOVERABLE_SCHEDULES",
    "REMOVE_DATA": "GIVE.REMOVE_DATA",
    "REMOVE_ERROR": "GIVE.REMOVE_ERROR",
    "REMOVE_SCHEDULE": "GIVE.REMOVE_SCHEDULE",
    "REMOVE_SCHEDULE_DATA": "GIVE.REMOVE_SCHEDULE_DATA",
    "SAVE_DATA": "GIVE.SAVE_DATA",
    "SAVE_SCHEDULES": "GIVE.SAVE_SCHEDULES",
    "SAVE_SCHEDULE_DATA": "GIVE.SAVE_SCHEDULE_DATA",
    "SET_ACCOUNTS": "GIVE.SET_ACCOUNTS",
    "SET_ERROR": "GIVE.SET_ERROR",
    "SET_ERRORS": "GIVE.SET_ERRORS",
    "SET_PROGRESS": "GIVE.SET_PROGRESS",
    "SET_RECOVERABLE_SCHEDULE": "GIVE.SET_RECOVERABLE_SCHEDULE",
    "SET_RECOVERABLE_SCHEDULES": "GIVE.SET_RECOVERABLE_SCHEDULES",
    "SET_REMINDER_DATE": "GIVE.SET_REMINDER_DATE",
    "SET_SAVED_ACCOUNT": "GIVE.SET_SAVED_ACCOUNT",
    "SET_STATE": "GIVE.SET_STATE",
    "SET_SUCCESS": "GIVE.SET_SUCCESS",
    "SET_TRANSACTION_DETAILS": "GIVE.SET_TRANSACTION_DETAILS",
    "SET_TRANSACTION_TYPE": "GIVE.SET_TRANSACTION_TYPE",
    "SET_USERID": "GIVE.SET_USERID",
    "STEP_PROGRESS": "GIVE.STEP_PROGRESS",
  },
}
`;
