exports[`SubFund should have correct default state for primary and secondary 1`] = `
Object {
  "active": false,
  "amount": null,
  "focused": false,
  "fund": false,
  "id": "test-id-reset",
}
`;

exports[`SubFund should have correct default state for primary and secondary 2`] = `
Object {
  "active": false,
  "amount": null,
  "focused": false,
  "fund": true,
  "id": "test-id-reset",
}
`;

exports[`SubFund should have dark text on primary fund 1`] = `
<SubFund
  accounts={
    Array [
      Object {
        "value": "main fund",
      },
    ]
  }
  preFill={[Function]}
  primary={true}
  update={[Function]}>
  <Primary
    accounts={
      Array [
        Object {
          "value": "main fund",
        },
      ]
    }
    classes="text-dark-tertiary"
    format={[Function]}
    preFill={[Function]}
    saveFund={[Function]}
    state={
      Object {
        "active": false,
        "amount": null,
        "focused": false,
        "fund": true,
        "id": "test-id-reset",
      }
    }>
    <div>
      <h3
        className="text-dark-tertiary display-inline-block push-half-bottom push-half-right">
        I\'d like to give
      </h3>
      <Input
        classes={
          Array [
            "soft-bottom",
            "input--active",
            "display-inline-block",
          ]
        }
        format={[Function]}
        hideLabel={true}
        id="test-id-reset"
        inputClasses="outlined--dotted outlined--light h3 hard-top flush-bottom text-dark-primary show-placeholder_1bkmqm1"
        name={true}
        placeholder="$0.00"
        style={
          Object {
            "maxWidth": "150px",
          }
        }
        type="tel">
        <div
          className="input soft-bottom input--active display-inline-block"
          data-spec="input-wrapper"
          style={
            Object {
              "maxWidth": "150px",
            }
          }>
          <RenderLabel
            hideLabel={true}
            id="test-id-reset"
            name={true} />
          <input
            className="outlined--dotted outlined--light h3 hard-top flush-bottom text-dark-primary show-placeholder_1bkmqm1"
            data-spec="input"
            id="test-id-reset"
            maxLength=""
            name={true}
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            placeholder="$0.00"
            style={
              Object {
                "maxWidth": "150px",
              }
            }
            type="tel" />
        </div>
      </Input>
      <h3
        className="text-dark-tertiary display-inline-block push-half-bottom push-half-right">
        to
      </h3>
      <Select
        classes={
          Array [
            "soft-bottom",
            "display-inline-block",
            "select_1rryh47",
          ]
        }
        hideLabel={true}
        id="test-id-reset_select"
        inputClasses="text-dark-tertiary outlined--dotted outlined--light h3 hard-top flush-bottom"
        items={
          Array [
            Object {
              "value": "main fund",
            },
          ]
        }
        name="select-account"
        onChange={[Function]}
        placeholder="select fund"
        value="main fund">
        <div
          className="input soft-bottom display-inline-block select_1rryh47 select_15p0e27">
          <select
            className="text-dark-tertiary outlined--dotted outlined--light h3 hard-top flush-bottom"
            id="test-id-reset_select"
            name="select-account"
            onChange={[Function]}
            onFocus={[Function]}
            placeholder="select fund">
            <option
              style={
                Object {
                  "display": "none",
                }
              }>
              select fund
            </option>
            <option
              value="main fund">
              main fund
            </option>
          </select>
        </div>
      </Select>
    </div>
  </Primary>
</SubFund>
`;

exports[`SubFund should have dark text on primary fund 2`] = `
<SubFund
  accounts={
    Array [
      Object {
        "value": "main fund",
      },
    ]
  }
  preFill={[Function]}
  primary={false}
  update={[Function]}>
  <Layout
    accounts={
      Array [
        Object {
          "value": "main fund",
        },
      ]
    }
    classes="text-light-tertiary"
    format={[Function]}
    preFill={[Function]}
    showInputs={[Function]}
    state={
      Object {
        "active": false,
        "amount": null,
        "focused": false,
        "fund": false,
        "id": "test-id-reset",
      }
    }>
    <div>
      <div
        className="display-inline-block push-half-bottom h3 push-half-right text-light-tertiary">
        and give to
      </div>
      <Select
        classes={
          Array [
            "soft-bottom",
            "display-inline-block",
            "select_1rryh47",
          ]
        }
        deselect={true}
        hideLabel={true}
        id="test-id-reset_select"
        includeBlank={true}
        inputClasses="text-light-tertiary outlined--dotted outlined--light h3 hard-top flush-bottom"
        items={
          Array [
            Object {
              "value": "main fund",
            },
          ]
        }
        name="select-account"
        onChange={[Function]}
        placeholder="select fund">
        <div
          className="input soft-bottom display-inline-block select_1rryh47 select_15p0e27">
          <select
            className="text-light-tertiary outlined--dotted outlined--light h3 hard-top flush-bottom"
            id="test-id-reset_select"
            name="select-account"
            onChange={[Function]}
            onFocus={[Function]}
            placeholder="select fund">
            <option
              style={
                Object {
                  "display": "none",
                }
              }>
              select fund
            </option>
            <option />
            <option
              value="main fund">
              main fund
            </option>
          </select>
        </div>
      </Select>
      <RenderAmountInput
        classes="text-light-tertiary"
        format={[Function]}
        preFill={[Function]}
        state={
          Object {
            "active": false,
            "amount": null,
            "focused": false,
            "fund": false,
            "id": "test-id-reset",
          }
        } />
    </div>
  </Layout>
</SubFund>
`;

exports[`SubFund should render primary fund 1`] = `
<SubFund
  accounts={
    Array [
      Object {
        "value": "main fund",
      },
    ]
  }
  preFill={[Function]}
  primary={true}
  update={[Function]}>
  <Primary
    accounts={
      Array [
        Object {
          "value": "main fund",
        },
      ]
    }
    classes="text-dark-tertiary"
    format={[Function]}
    preFill={[Function]}
    saveFund={[Function]}
    state={
      Object {
        "active": false,
        "amount": null,
        "focused": false,
        "fund": true,
        "id": "test-id-reset",
      }
    }>
    <div>
      <h3
        className="text-dark-tertiary display-inline-block push-half-bottom push-half-right">
        I\'d like to give
      </h3>
      <Input
        classes={
          Array [
            "soft-bottom",
            "input--active",
            "display-inline-block",
          ]
        }
        format={[Function]}
        hideLabel={true}
        id="test-id-reset"
        inputClasses="outlined--dotted outlined--light h3 hard-top flush-bottom text-dark-primary show-placeholder_1bkmqm1"
        name={true}
        placeholder="$0.00"
        style={
          Object {
            "maxWidth": "150px",
          }
        }
        type="tel">
        <div
          className="input soft-bottom input--active display-inline-block"
          data-spec="input-wrapper"
          style={
            Object {
              "maxWidth": "150px",
            }
          }>
          <RenderLabel
            hideLabel={true}
            id="test-id-reset"
            name={true} />
          <input
            className="outlined--dotted outlined--light h3 hard-top flush-bottom text-dark-primary show-placeholder_1bkmqm1"
            data-spec="input"
            id="test-id-reset"
            maxLength=""
            name={true}
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            placeholder="$0.00"
            style={
              Object {
                "maxWidth": "150px",
              }
            }
            type="tel" />
        </div>
      </Input>
      <h3
        className="text-dark-tertiary display-inline-block push-half-bottom push-half-right">
        to
      </h3>
      <Select
        classes={
          Array [
            "soft-bottom",
            "display-inline-block",
            "select_1rryh47",
          ]
        }
        hideLabel={true}
        id="test-id-reset_select"
        inputClasses="text-dark-tertiary outlined--dotted outlined--light h3 hard-top flush-bottom"
        items={
          Array [
            Object {
              "value": "main fund",
            },
          ]
        }
        name="select-account"
        onChange={[Function]}
        placeholder="select fund"
        value="main fund">
        <div
          className="input soft-bottom display-inline-block select_1rryh47 select_15p0e27">
          <select
            className="text-dark-tertiary outlined--dotted outlined--light h3 hard-top flush-bottom"
            id="test-id-reset_select"
            name="select-account"
            onChange={[Function]}
            onFocus={[Function]}
            placeholder="select fund">
            <option
              style={
                Object {
                  "display": "none",
                }
              }>
              select fund
            </option>
            <option
              value="main fund">
              main fund
            </option>
          </select>
        </div>
      </Select>
    </div>
  </Primary>
</SubFund>
`;

exports[`SubFund should render with minimal props 1`] = `
<SubFund
  accounts={
    Array [
      Object {
        "value": "main fund",
      },
    ]
  }>
  <Layout
    accounts={
      Array [
        Object {
          "value": "main fund",
        },
      ]
    }
    classes="text-light-tertiary"
    format={[Function]}
    showInputs={[Function]}
    state={
      Object {
        "active": false,
        "amount": null,
        "focused": false,
        "fund": false,
        "id": "test-id-reset",
      }
    }>
    <div>
      <div
        className="display-inline-block push-half-bottom h3 push-half-right text-light-tertiary">
        and give to
      </div>
      <Select
        classes={
          Array [
            "soft-bottom",
            "display-inline-block",
            "select_1rryh47",
          ]
        }
        deselect={true}
        hideLabel={true}
        id="test-id-reset_select"
        includeBlank={true}
        inputClasses="text-light-tertiary outlined--dotted outlined--light h3 hard-top flush-bottom"
        items={
          Array [
            Object {
              "value": "main fund",
            },
          ]
        }
        name="select-account"
        onChange={[Function]}
        placeholder="select fund">
        <div
          className="input soft-bottom display-inline-block select_1rryh47 select_15p0e27">
          <select
            className="text-light-tertiary outlined--dotted outlined--light h3 hard-top flush-bottom"
            id="test-id-reset_select"
            name="select-account"
            onChange={[Function]}
            onFocus={[Function]}
            placeholder="select fund">
            <option
              style={
                Object {
                  "display": "none",
                }
              }>
              select fund
            </option>
            <option />
            <option
              value="main fund">
              main fund
            </option>
          </select>
        </div>
      </Select>
      <RenderAmountInput
        classes="text-light-tertiary"
        format={[Function]}
        state={
          Object {
            "active": false,
            "amount": null,
            "focused": false,
            "fund": false,
            "id": "test-id-reset",
          }
        } />
    </div>
  </Layout>
</SubFund>
`;

exports[`withRedux should include all the give actions 1`] = `
Object {
  "addTransactions": [Function],
  "clear": [Function],
  "clearAccount": [Function],
  "clearAllSchedulesExcept": [Function],
  "clearData": [Function],
  "clearSchedule": [Function],
  "clearSchedules": [Function],
  "clearTransaction": [Function],
  "clearTransactions": [Function],
  "deleteRecoverableSchedules": [Function],
  "deleteSchedule": [Function],
  "error": [Function],
  "fix": [Function],
  "loading": [Function],
  "next": [Function],
  "previous": [Function],
  "removeSchedule": [Function],
  "reset": [Function],
  "save": [Function],
  "saveSchedule": [Function],
  "saveSchedules": [Function],
  "setAccount": [Function],
  "setAccounts": [Function],
  "setDetails": [Function],
  "setErrors": [Function],
  "setProgress": [Function],
  "setRecoverableSchedule": [Function],
  "setReminder": [Function],
  "setState": [Function],
  "setTransactionType": [Function],
  "setUserId": [Function],
  "submit": [Function],
  "types": Object {
    "ADD_TRANSACTION": "GIVE.ADD_TRANSACTION",
    "CLEAR_DATA": "GIVE.CLEAR_DATA",
    "CLEAR_SCHEDULES": "GIVE.CLEAR_SCHEDULES",
    "CLEAR_SCHEDULES_EXCEPT": "GIVE.CLEAR_SCHEDULES_EXCEPT",
    "CLEAR_TRANSACTION": "GIVE.CLEAR_TRANSACTION",
    "CLEAR_TRANSACTIONS": "GIVE.CLEAR_TRANSACTIONS",
    "DELETE_RECOVERABLE_SCHEDULE": "GIVE.DELETE_RECOVERABLE_SCHEDULE",
    "DELETE_RECOVERABLE_SCHEDULES": "GIVE.DELETE_RECOVERABLE_SCHEDULES",
    "REMOVE_DATA": "GIVE.REMOVE_DATA",
    "REMOVE_ERROR": "GIVE.REMOVE_ERROR",
    "REMOVE_SCHEDULE": "GIVE.REMOVE_SCHEDULE",
    "REMOVE_SCHEDULE_DATA": "GIVE.REMOVE_SCHEDULE_DATA",
    "SAVE_DATA": "GIVE.SAVE_DATA",
    "SAVE_SCHEDULES": "GIVE.SAVE_SCHEDULES",
    "SAVE_SCHEDULE_DATA": "GIVE.SAVE_SCHEDULE_DATA",
    "SET_ACCOUNTS": "GIVE.SET_ACCOUNTS",
    "SET_ERROR": "GIVE.SET_ERROR",
    "SET_ERRORS": "GIVE.SET_ERRORS",
    "SET_PROGRESS": "GIVE.SET_PROGRESS",
    "SET_RECOVERABLE_SCHEDULE": "GIVE.SET_RECOVERABLE_SCHEDULE",
    "SET_RECOVERABLE_SCHEDULES": "GIVE.SET_RECOVERABLE_SCHEDULES",
    "SET_REMINDER_DATE": "GIVE.SET_REMINDER_DATE",
    "SET_SAVED_ACCOUNT": "GIVE.SET_SAVED_ACCOUNT",
    "SET_STATE": "GIVE.SET_STATE",
    "SET_SUCCESS": "GIVE.SET_SUCCESS",
    "SET_TRANSACTION_DETAILS": "GIVE.SET_TRANSACTION_DETAILS",
    "SET_TRANSACTION_TYPE": "GIVE.SET_TRANSACTION_TYPE",
    "SET_USERID": "GIVE.SET_USERID",
    "STEP_PROGRESS": "GIVE.STEP_PROGRESS",
  },
}
`;
