exports[`CartContainer > Class Methods changeFund handles deselecting a fund 1`] = `
Object {
  "canCheckout": true,
  "subfunds": Array [
    Object {
      "accounts": Array [
        Object {
          "label": "TEST 1",
          "value": 1,
        },
        Object {
          "label": "TEST 2",
          "value": 2,
        },
        Object {
          "label": "TEST 3",
          "value": 3,
        },
        Object {
          "label": "TEST 4",
          "value": 4,
        },
      ],
      "amount": null,
      "fundId": 0,
      "id": 1,
      "primary": true,
    },
  ],
}
`;

exports[`CartContainer > Class Methods changeFund handles deselecting a fund with an amount 1`] = `
Object {
  "canCheckout": true,
  "subfunds": Array [
    Object {
      "accounts": Array [
        Object {
          "label": "TEST 1",
          "value": 1,
        },
        Object {
          "label": "TEST 2",
          "value": 2,
        },
        Object {
          "label": "TEST 3",
          "value": 3,
        },
        Object {
          "label": "TEST 4",
          "value": 4,
        },
      ],
      "amount": 10,
      "fundId": 2,
      "id": 1,
      "primary": true,
    },
  ],
}
`;

exports[`CartContainer > Class Methods changeFund update the state correctly 1`] = `
Object {
  "canCheckout": true,
  "subfunds": Array [
    Object {
      "accounts": Array [
        Object {
          "label": "TEST 1",
          "value": 1,
        },
        Object {
          "label": "TEST 2",
          "value": 2,
        },
        Object {
          "label": "TEST 3",
          "value": 3,
        },
        Object {
          "label": "TEST 4",
          "value": 4,
        },
      ],
      "amount": null,
      "fundId": 2,
      "id": 1,
      "primary": true,
    },
  ],
}
`;

exports[`CartContainer > Class Methods toggleSecondFund correctly toggles 1`] = `
Object {
  "canCheckout": true,
  "subfunds": Array [
    Object {
      "accounts": Array [
        Object {
          "label": "TEST 1",
          "value": 1,
        },
        Object {
          "label": "TEST 2",
          "value": 2,
        },
        Object {
          "label": "TEST 3",
          "value": 3,
        },
        Object {
          "label": "TEST 4",
          "value": 4,
        },
      ],
      "amount": 10,
      "fundId": 1,
      "id": 1,
      "primary": true,
    },
  ],
}
`;

exports[`CartContainer > Class Methods toggleSecondFund creates the correct new subfund state 1`] = `
Object {
  "canCheckout": true,
  "subfunds": Array [
    Object {
      "accounts": Array [
        Object {
          "label": "TEST 1",
          "value": 1,
        },
        Object {
          "label": "TEST 2",
          "value": 2,
        },
        Object {
          "label": "TEST 3",
          "value": 3,
        },
        Object {
          "label": "TEST 4",
          "value": 4,
        },
      ],
      "amount": null,
      "fundId": 1,
      "id": 1,
      "primary": true,
    },
    Object {
      "accounts": Array [
        Object {
          "label": "TEST 1",
          "value": 1,
        },
        Object {
          "label": "TEST 2",
          "value": 2,
        },
        Object {
          "label": "TEST 3",
          "value": 3,
        },
        Object {
          "label": "TEST 4",
          "value": 4,
        },
      ],
      "amount": "",
      "fundId": undefined,
      "id": 2,
      "primary": false,
    },
  ],
}
`;

exports[`CartContainer > Class Methods toggleSecondFund creates the correct new subfund state when the first fund is selected 1`] = `
Object {
  "canCheckout": true,
  "subfunds": Array [
    Object {
      "accounts": Array [
        Object {
          "label": "TEST 1",
          "value": 1,
        },
        Object {
          "label": "TEST 2",
          "value": 2,
        },
        Object {
          "label": "TEST 3",
          "value": 3,
        },
        Object {
          "label": "TEST 4",
          "value": 4,
        },
      ],
      "amount": 10,
      "fundId": 1,
      "id": 1,
      "primary": true,
    },
    Object {
      "accounts": Array [
        Object {
          "label": "TEST 2",
          "value": 2,
        },
        Object {
          "label": "TEST 3",
          "value": 3,
        },
        Object {
          "label": "TEST 4",
          "value": 4,
        },
      ],
      "amount": "",
      "fundId": undefined,
      "id": 2,
      "primary": false,
    },
  ],
}
`;

exports[`CartContainer > Lifecycle functions accepts query string prefills the fund 1`] = `
<CartContainer
  accounts={
    Array [
      Object {
        "id": "1",
        "name": "test",
      },
    ]
  }
  addTransactions={[Function]}
  clearTransaction={[Function]}
  clearTransactions={[Function]}
  give="5"
  query={Object {}}>
  <Component
    accounts={
      Array [
        Object {
          "id": "1",
          "name": "test",
        },
      ]
    }
    canCheckout={true}
    changeAmount={[Function]}
    changeFund={[Function]}
    preFill={[Function]}
    setCanCheckout={[Function]}
    subfunds={
      Array [
        Object {
          "accounts": Array [
            Object {
              "label": "test",
              "value": "1",
            },
          ],
          "amount": 10,
          "fundId": "1",
          "id": 1,
          "primary": true,
        },
      ]
    }
    toggleSecondFund={[Function]}
    total={10}>
    <div
      className="push-top@handheld soft-half-top@lap-and-up">
      <Form
        classes={
          Array [
            "text-left",
            "hard",
          ]
        }
        id="add-to-cart"
        submit={[Function]}>
        <form
          className="hard-ends text-left hard"
          id="add-to-cart"
          onSubmit={[Function]}>
          <FieldSet>
            <fieldset
              className="flush-bottom">
              <div
                className="display-inline-block">
                <mockConstructor
                  accounts={
                    Array [
                      Object {
                        "label": "test",
                        "value": "1",
                      },
                    ]
                  }
                  amount={10}
                  changeAmount={[Function]}
                  changeFund={[Function]}
                  fundId="1"
                  id={1}
                  preFill={[Function]}
                  primary={true}>
                  <div />
                </mockConstructor>
                <div
                  className="display-block one-whole soft-bottom" />
                <mockConstructor
                  setCanCheckout={[Function]}>
                  <div />
                </mockConstructor>
                <h3
                  className="display-inline-block text-dark-primary push-half-bottom push-half-right">
                  my total is
                </h3>
                <span
                  className="display-inline-block text-dark-primary push-half-bottom">
                  <Currency
                    amount="$10.00"
                    baseHeadingSize="1"
                    className="text-left">
                    <div
                      className="floating text-dark-primary text-left">
                      <h3
                        className="floating__item flush"
                        style={
                          Object {
                            "paddingRight": "5px",
                          }
                        } />
                      <h1
                        className="floating__item flush">
                        10
                      </h1>
                      <h3
                        className="floating__item flush" />
                    </div>
                  </Currency>
                </span>
              </div>
              <div
                className="push-top">
                <mockConstructor
                  disabled={false}>
                  <div />
                </mockConstructor>
              </div>
            </fieldset>
          </FieldSet>
        </form>
      </Form>
    </div>
  </Component>
</CartContainer>
`;

exports[`CartContainer > Lifecycle functions calls clearTransactions 1`] = `
Object {
  "canCheckout": true,
  "subfunds": Array [
    Object {
      "accounts": Array [
        Object {
          "label": "test",
          "value": "1",
        },
      ],
      "amount": null,
      "fundId": "1",
      "id": 1,
      "primary": true,
    },
  ],
}
`;

exports[`CartContainer > Lifecycle functions should clear transactions on success 1`] = `
Object {
  "canCheckout": true,
  "subfunds": Array [
    Object {
      "accounts": Array [
        Object {
          "label": "test",
          "value": "1",
        },
      ],
      "amount": null,
      "fundId": "1",
      "id": 1,
      "primary": true,
    },
  ],
}
`;

exports[`CartContainer > Lifecycle functions should clear transactions on when amount is set to 0 1`] = `
Object {
  "canCheckout": true,
  "subfunds": Array [
    Object {
      "accounts": Array [
        Object {
          "label": "test",
          "value": "1",
        },
      ],
      "amount": null,
      "fundId": "1",
      "id": 1,
      "primary": true,
    },
  ],
}
`;

exports[`test should not render if no accounts 1`] = `
<CartContainer
  accounts={Array []}
  addTransactions={[Function]}
  clearTransaction={[Function]}
  clearTransactions={[Function]}
  give="5"
  query={Object {}} />
`;

exports[`test should properly render with multiple accounts 1`] = `
<CartContainer
  accounts={
    Array [
      Object {
        "id": 1,
        "name": "TEST 1",
      },
      Object {
        "id": 2,
        "name": "TEST 2",
      },
      Object {
        "id": 3,
        "name": "TEST 3",
      },
      Object {
        "id": 4,
        "name": "TEST 4",
      },
    ]
  }
  addTransactions={[Function]}
  clearTransaction={[Function]}
  clearTransactions={[Function]}
  give="5"
  query={Object {}}>
  <Component
    accounts={
      Array [
        Object {
          "id": 1,
          "name": "TEST 1",
        },
        Object {
          "id": 2,
          "name": "TEST 2",
        },
        Object {
          "id": 3,
          "name": "TEST 3",
        },
        Object {
          "id": 4,
          "name": "TEST 4",
        },
      ]
    }
    canCheckout={false}
    changeAmount={[Function]}
    changeFund={[Function]}
    preFill={[Function]}
    setCanCheckout={[Function]}
    subfunds={
      Array [
        Object {
          "accounts": Array [
            Object {
              "label": "TEST 1",
              "value": 1,
            },
            Object {
              "label": "TEST 2",
              "value": 2,
            },
            Object {
              "label": "TEST 3",
              "value": 3,
            },
            Object {
              "label": "TEST 4",
              "value": 4,
            },
          ],
          "amount": null,
          "fundId": 1,
          "id": 1,
          "primary": true,
        },
      ]
    }
    toggleSecondFund={[Function]}
    total={0}>
    <div
      className="push-top@handheld soft-half-top@lap-and-up">
      <Form
        classes={
          Array [
            "text-left",
            "hard",
          ]
        }
        id="add-to-cart"
        submit={[Function]}>
        <form
          className="hard-ends text-left hard"
          id="add-to-cart"
          onSubmit={[Function]}>
          <FieldSet>
            <fieldset
              className="flush-bottom">
              <div
                className="display-inline-block">
                <mockConstructor
                  accounts={
                    Array [
                      Object {
                        "label": "TEST 1",
                        "value": 1,
                      },
                      Object {
                        "label": "TEST 2",
                        "value": 2,
                      },
                      Object {
                        "label": "TEST 3",
                        "value": 3,
                      },
                      Object {
                        "label": "TEST 4",
                        "value": 4,
                      },
                    ]
                  }
                  amount={null}
                  changeAmount={[Function]}
                  changeFund={[Function]}
                  fundId={1}
                  id={1}
                  preFill={[Function]}
                  primary={true}>
                  <div />
                </mockConstructor>
                <div
                  className="display-block one-whole soft-bottom">
                  <SmallButton
                    className="btn--dark-secondary"
                    disabled={true}
                    onClick={[Function]}
                    text="Add Another Fund">
                    <button
                      className="
                        btn btn--small@next
                        btn--disabled
                        btn--dark-secondary
                      "
                      disabled={true}
                      onClick={[Function]}
                      style={Object {}}>
                      Add Another Fund
                    </button>
                  </SmallButton>
                </div>
                <mockConstructor
                  setCanCheckout={[Function]}>
                  <div />
                </mockConstructor>
                <h3
                  className="display-inline-block text-dark-primary push-half-bottom push-half-right">
                  my total is
                </h3>
                <span
                  className="display-inline-block text-dark-primary push-half-bottom">
                  <Currency
                    amount="$0.00"
                    baseHeadingSize="1"
                    className="text-left">
                    <div
                      className="floating text-dark-primary text-left">
                      <h3
                        className="floating__item flush"
                        style={
                          Object {
                            "paddingRight": "5px",
                          }
                        } />
                      <h1
                        className="floating__item flush">
                        0
                      </h1>
                      <h3
                        className="floating__item flush" />
                    </div>
                  </Currency>
                </span>
              </div>
              <div
                className="push-top">
                <mockConstructor
                  disabled={true}>
                  <div />
                </mockConstructor>
              </div>
            </fieldset>
          </FieldSet>
        </form>
      </Form>
    </div>
  </Component>
</CartContainer>
`;

exports[`test should render with minimal props 1`] = `
<Component
  accounts={
    Array [
      Object {
        "id": "1",
        "name": "test",
      },
    ]
  }
  canCheckout={false}
  changeAmount={[Function]}
  changeFund={[Function]}
  preFill={[Function]}
  setCanCheckout={[Function]}
  subfunds={
    Array [
      Object {
        "accounts": Array [
          Object {
            "label": "test",
            "value": "1",
          },
        ],
        "amount": null,
        "fundId": "1",
        "id": 1,
        "primary": true,
      },
    ]
  }
  toggleSecondFund={[Function]}
  total={0} />
`;
