exports[`CartContainer > Class Methods changeFund handles deselecting a fund 1`] = `
Object {
  "subfunds": Array [
    Object {
      "accounts": Array [
        Object {
          "label": "TEST 1",
          "value": 1,
        },
        Object {
          "label": "TEST 2",
          "value": 2,
        },
        Object {
          "label": "TEST 3",
          "value": 3,
        },
        Object {
          "label": "TEST 4",
          "value": 4,
        },
      ],
      "amount": null,
      "fundId": undefined,
      "id": 1,
      "primary": true,
    },
    Object {
      "accounts": Array [
        Object {
          "label": "TEST 1",
          "value": 1,
        },
        Object {
          "label": "TEST 2",
          "value": 2,
        },
        Object {
          "label": "TEST 3",
          "value": 3,
        },
        Object {
          "label": "TEST 4",
          "value": 4,
        },
      ],
      "amount": null,
      "fundId": undefined,
      "id": 2,
      "primary": false,
    },
  ],
}
`;

exports[`CartContainer > Class Methods changeFund handles deselecting a fund with an amount 1`] = `
Object {
  "subfunds": Array [
    Object {
      "accounts": Array [
        Object {
          "label": "TEST 1",
          "value": 1,
        },
        Object {
          "label": "TEST 2",
          "value": 2,
        },
        Object {
          "label": "TEST 3",
          "value": 3,
        },
        Object {
          "label": "TEST 4",
          "value": 4,
        },
      ],
      "amount": 10,
      "fundId": 2,
      "id": 1,
      "primary": true,
    },
    Object {
      "accounts": Array [
        Object {
          "label": "TEST 3",
          "value": 3,
        },
        Object {
          "label": "TEST 4",
          "value": 4,
        },
      ],
      "amount": null,
      "fundId": undefined,
      "id": 2,
      "primary": false,
    },
  ],
}
`;

exports[`CartContainer > Class Methods changeFund update the state correctly 1`] = `
Object {
  "subfunds": Array [
    Object {
      "accounts": Array [
        Object {
          "label": "TEST 1",
          "value": 1,
        },
        Object {
          "label": "TEST 2",
          "value": 2,
        },
        Object {
          "label": "TEST 3",
          "value": 3,
        },
        Object {
          "label": "TEST 4",
          "value": 4,
        },
      ],
      "amount": null,
      "fundId": 2,
      "id": 1,
      "primary": true,
    },
    Object {
      "accounts": Array [
        Object {
          "label": "TEST 1",
          "value": 1,
        },
        Object {
          "label": "TEST 3",
          "value": 3,
        },
        Object {
          "label": "TEST 4",
          "value": 4,
        },
      ],
      "amount": null,
      "fundId": undefined,
      "id": 2,
      "primary": false,
    },
  ],
}
`;

exports[`CartContainer > Lifecycle functions accepts query string prefills the fund 1`] = `
<CartContainer clearTransactions={[Function]} accounts={{...}} clearTransaction={[Function]} addTransactions={[Function]} give="5" query={{...}}>
  <Component subfunds={{...}} changeFund={[Function]} changeAmount={[Function]} preFill={[Function]} total={10}>
    <div className="push-top@handheld soft-half-top@lap-and-up">
      <Form classes={{...}} submit={[Function]} id="add-to-cart">
        <form id="add-to-cart" onSubmit={[Function]} className="hard-ends text-left hard" action={[undefined]} method={[undefined]} style={[undefined]}>
          <FieldSet theme={[undefined]}>
            <fieldset className="flush-bottom">
              <div className="display-inline-block">
                <mockConstructor preFill={[Function]} changeAmount={[Function]} changeFund={[Function]} accounts={{...}} primary={true} id={1} fundId="1" amount={10}>
                  <div />
                </mockConstructor>
                <h3 className="display-inline-block text-dark-tertiary push-half-bottom push-half-right">
                  so my total is
                </h3>
                <h3 className="display-inline-block text-brand push-half-bottom">
                  $10.00
                </h3>
              </div>
              <div className="push-top">
                <mockConstructor disabled={false}>
                  <div />
                </mockConstructor>
              </div>
            </fieldset>
          </FieldSet>
        </form>
      </Form>
    </div>
  </Component>
</CartContainer>
`;

exports[`CartContainer > Lifecycle functions calls clearTransactions 1`] = `
Object {
  "subfunds": Array [
    Object {
      "accounts": Array [
        Object {
          "label": "test",
          "value": "1",
        },
      ],
      "amount": null,
      "fundId": "1",
      "id": 1,
      "primary": true,
    },
  ],
}
`;

exports[`CartContainer > Lifecycle functions should clear transactions on success 1`] = `
Object {
  "subfunds": Array [
    Object {
      "accounts": Array [
        Object {
          "label": "test",
          "value": "1",
        },
      ],
      "amount": null,
      "fundId": "1",
      "id": 1,
      "primary": true,
    },
  ],
}
`;

exports[`test should not render if no accounts 1`] = `<CartContainer clearTransactions={[Function]} accounts={{...}} clearTransaction={[Function]} addTransactions={[Function]} give="5" query={{...}} />`;

exports[`test should properly render with multiple accounts 1`] = `
<CartContainer clearTransactions={[Function]} accounts={{...}} clearTransaction={[Function]} addTransactions={[Function]} give="5" query={{...}}>
  <Component subfunds={{...}} changeFund={[Function]} changeAmount={[Function]} preFill={[Function]} total={0}>
    <div className="push-top@handheld soft-half-top@lap-and-up">
      <Form classes={{...}} submit={[Function]} id="add-to-cart">
        <form id="add-to-cart" onSubmit={[Function]} className="hard-ends text-left hard" action={[undefined]} method={[undefined]} style={[undefined]}>
          <FieldSet theme={[undefined]}>
            <fieldset className="flush-bottom">
              <div className="display-inline-block">
                <mockConstructor preFill={[Function]} changeAmount={[Function]} changeFund={[Function]} accounts={{...}} primary={true} id={1} fundId={1} amount={{...}}>
                  <div />
                </mockConstructor>
                <mockConstructor preFill={[Function]} changeAmount={[Function]} changeFund={[Function]} accounts={{...}} primary={false} id={2} fundId={[undefined]} amount={{...}}>
                  <div />
                </mockConstructor>
                <h3 className="display-inline-block text-dark-tertiary push-half-bottom push-half-right">
                  so my total is
                </h3>
                <h3 className="display-inline-block text-brand push-half-bottom">
                  $0.00
                </h3>
              </div>
              <div className="push-top">
                <mockConstructor disabled={true}>
                  <div />
                </mockConstructor>
              </div>
            </fieldset>
          </FieldSet>
        </form>
      </Form>
    </div>
  </Component>
</CartContainer>
`;

exports[`test should render with minimal props 1`] = `<Component subfunds={{...}} changeFund={[Function]} changeAmount={[Function]} preFill={[Function]} total={0} />`;
