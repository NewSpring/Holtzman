// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders loading 1`] = `
<div>
  <Connect(SplitContainerWithoutData)>
    <Right
      classes={
        Array [
          "background--left",
        ]
      }
      mobile={false}
    />
  </Connect(SplitContainerWithoutData)>
  <Left
    classes={
      Array [
        "background--light-secondary",
      ]
    }
    scroll={true}
  >
    <div
      className="soft-double text-center"
    >
      <Loading />
    </div>
  </Left>
</div>
`;

exports[`renders with props 1`] = `
<div>
  <Connect(SplitContainerWithoutData)>
    <Right
      classes={
        Array [
          "background--left",
        ]
      }
      mobile={false}
    >
      <ControllableWrapper
        autoCenter={true}
        markers={
          Array [
            Object {
              "latitude": 2,
              "longitude": 2,
            },
          ]
        }
      />
    </Right>
  </Connect(SplitContainerWithoutData)>
  <Left
    classes={
      Array [
        "background--light-secondary",
      ]
    }
    scroll={true}
  >
    <Layout
      group={
        Object {
          "entityId": "1",
          "locations": Array [
            Object {
              "location": Object {
                "latitude": 2,
                "longitude": 2,
              },
            },
          ],
          "members": Array [
            Object {
              "person": Object {
                "id": 200,
              },
              "role": "default",
            },
            Object {
              "person": Object {
                "id": 100,
              },
              "role": "leader",
            },
          ],
          "photo": "http://test.com/test.jpg",
        }
      }
      isLeader={1}
      join={[Function]}
      leaders={
        Array [
          Object {
            "person": Object {
              "id": 100,
            },
            "role": "leader",
          },
        ]
      }
    />
  </Left>
</div>
`;

exports[`renders without map on mobile 1`] = `
<div>
  <Connect(SplitContainerWithoutData)>
    <Right
      classes={
        Array [
          "background--left",
        ]
      }
      mobile={false}
    />
  </Connect(SplitContainerWithoutData)>
  <Left
    classes={
      Array [
        "background--light-secondary",
      ]
    }
    scroll={true}
  >
    <Layout
      group={
        Object {
          "entityId": "1",
          "locations": Array [
            Object {
              "location": Object {
                "latitude": 2,
                "longitude": 2,
              },
            },
          ],
          "members": Array [
            Object {
              "person": Object {
                "id": 200,
              },
              "role": "default",
            },
            Object {
              "person": Object {
                "id": 100,
              },
              "role": "leader",
            },
          ],
          "photo": "http://test.com/test.jpg",
        }
      }
      isLeader={1}
      join={[Function]}
      leaders={
        Array [
          Object {
            "person": Object {
              "id": 100,
            },
            "role": "leader",
          },
        ]
      }
    />
  </Left>
</div>
`;

exports[`renders without map on server 1`] = `
<div>
  <Connect(SplitContainerWithoutData)>
    <Right
      classes={
        Array [
          "background--left",
        ]
      }
      mobile={false}
    />
  </Connect(SplitContainerWithoutData)>
  <Left
    classes={
      Array [
        "background--light-secondary",
      ]
    }
    scroll={true}
  >
    <Layout
      group={
        Object {
          "entityId": "1",
          "locations": Array [
            Object {
              "location": Object {
                "latitude": 2,
                "longitude": 2,
              },
            },
          ],
          "members": Array [
            Object {
              "person": Object {
                "id": 200,
              },
              "role": "default",
            },
            Object {
              "person": Object {
                "id": 100,
              },
              "role": "leader",
            },
          ],
          "photo": "http://test.com/test.jpg",
        }
      }
      isLeader={1}
      join={[Function]}
      leaders={
        Array [
          Object {
            "person": Object {
              "id": 100,
            },
            "role": "leader",
          },
        ]
      }
    />
  </Left>
</div>
`;

exports[`should contain a group mutation 1`] = `
"mutation AddToGroup($groupId: ID!, $message: String!, $communicationPreference: String!) {
  requestGroupInfo(groupId: $groupId, message: $message, communicationPreference: $communicationPreference) {
    error
    success
    code
  }
}
"
`;

exports[`should contain a phone number mutation 1`] = `
"mutation SetPhoneNumber($phoneNumber: String!) {
  setPhoneNumber(phoneNumber: $phoneNumber) {
    error
    success
    code
  }
}
"
`;

exports[`should render contact if member is a leader 1`] = `
<div>
  <Connect(SplitContainerWithoutData)>
    <Right
      classes={
        Array [
          "background--left",
        ]
      }
      mobile={false}
    />
  </Connect(SplitContainerWithoutData)>
  <Left
    classes={
      Array [
        "background--light-secondary",
      ]
    }
    scroll={true}
  >
    <Layout
      group={
        Object {
          "members": Array [
            Object {
              "person": Object {
                "id": 200,
              },
              "role": "default",
            },
            Object {
              "person": Object {
                "id": 500,
              },
              "role": "leader",
            },
          ],
          "photo": "//s3.amazonaws.com/ns.assets/apollos/group-profile-placeholder.png",
        }
      }
      join={[Function]}
      leaders={
        Array [
          Object {
            "person": Object {
              "id": 500,
            },
            "role": "leader",
          },
        ]
      }
      loginParam=""
    />
  </Left>
</div>
`;

exports[`should render manage if member is a leader 1`] = `
<div>
  <Connect(SplitContainerWithoutData)>
    <Right
      classes={
        Array [
          "background--left",
        ]
      }
      mobile={false}
    />
  </Connect(SplitContainerWithoutData)>
  <Left
    classes={
      Array [
        "background--light-secondary",
      ]
    }
    scroll={true}
  >
    <Layout
      group={
        Object {
          "entityId": "1",
          "locations": Array [
            Object {
              "location": Object {
                "latitude": 2,
                "longitude": 2,
              },
            },
          ],
          "members": Array [
            Object {
              "person": Object {
                "id": 200,
              },
              "role": "default",
            },
            Object {
              "person": Object {
                "id": 100,
              },
              "role": "leader",
            },
          ],
          "photo": "http://test.com/test.jpg",
        }
      }
      isLeader={1}
      join={[Function]}
      leaders={
        Array [
          Object {
            "person": Object {
              "id": 100,
            },
            "role": "leader",
          },
        ]
      }
    />
  </Left>
</div>
`;
