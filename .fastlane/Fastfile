# vim:set synax=ruby

fastlane_version "2.13.0"

default_platform :ios

platform :ios do

  team_id "#{ENV['TEAM_ID']}"

  lane :update_provisioning_profile_specifier do |params|
    proj = params[:project]
    target_filter = params[:target_filter] || params[:build_configuration_filter]
    configuration = params[:build_configuration]
    prov_name = params[:prov_name]

    require 'xcodeproj'

    project = Xcodeproj::Project.open(proj)
    project.targets.each do |target|
      if !target_filter || target.product_name.match(target_filter) || (target.respond_to?(:product_type) && target.product_type.match(target_filter))
        UI.success("Updating target #{target.product_name}...")
      else
        UI.important("Skipping target #{target.product_name} as it doesn't match the filter '#{target_filter}'")
        next
      end

      target.build_configuration_list.build_configurations.each do |build_configuration|
        config_name = build_configuration.name
        if !configuration || config_name.match(configuration)
          UI.success("Updating configuration #{config_name}...")
        else
          UI.important("Skipping configuration #{config_name} as it doesn't match the filter '#{configuration}'")
          next
        end

        build_configuration.build_settings["PROVISIONING_PROFILE_SPECIFIER"] = prov_name
      end
    end
    project.save
  end

  private_lane :build_app_production do
    match(
      type: "appstore",
      git_url: ENV['CERTIFICATES_REPO'],
      app_identifier: [ "cc.newspring.newspringapp", "com.subsplashstudio31.NewSpring-Church" ],
      readonly: true,
      username: ENV["APPLE_ID"],
    )

#    increment_build_number(
#      xcodeproj: "#{ENV['METEOR_OUTPUT_ABSOLUTE']}/ios/project/#{ENV['XCODE_SCHEME_NAME']}.xcodeproj",
#      build_number: ENV['APP_BUILD'],
#    )
#
#    increment_version_number(
#      xcodeproj: "#{ENV['METEOR_OUTPUT_ABSOLUTE']}/ios/project/#{ENV['XCODE_SCHEME_NAME']}.xcodeproj",
#      version_number: ENV['APP_VERSION'],
#    )

    update_provisioning_profile_specifier(
      project: "#{ENV['METEOR_OUTPUT_ABSOLUTE']}/ios/project/#{ENV['XCODE_SCHEME_NAME']}.xcodeproj",
      prov_name: ENV["PROVISIONING_PROFILE_SPECIFIER"],
      build_configuration: "Release",
      target_filter: ENV['XCODE_SCHEME_NAME'],
    )

    set_info_plist_value(
      path: "#{ENV['METEOR_OUTPUT_ABSOLUTE']}/ios/project/#{ENV['XCODE_SCHEME_NAME']}/#{ENV['XCODE_SCHEME_NAME']}-Info.plist",
      key: "NSCameraUsageDescription",
      value: "Profile Upload",
    )

    set_info_plist_value(
      path: "#{ENV['METEOR_OUTPUT_ABSOLUTE']}/ios/project/#{ENV['XCODE_SCHEME_NAME']}/#{ENV['XCODE_SCHEME_NAME']}-Info.plist",
      key: "NSPhotoLibraryUsageDescription",
      value: "Profile Upload",
    )

    set_info_plist_value(
      path: "#{ENV['METEOR_OUTPUT_ABSOLUTE']}/ios/project/#{ENV['XCODE_SCHEME_NAME']}/#{ENV['XCODE_SCHEME_NAME']}-Info.plist",
      key: "CFBundleShortVersionString",
      value: ENV['APP_VERSION'],
    )

    set_info_plist_value(
      path: "#{ENV['METEOR_OUTPUT_ABSOLUTE']}/ios/project/#{ENV['XCODE_SCHEME_NAME']}/#{ENV['XCODE_SCHEME_NAME']}-Info.plist",
      key: "CFBundleVersion",
      value: ENV['APP_BUILD']
    )

    set_info_plist_value(
      path: "#{ENV['METEOR_OUTPUT_ABSOLUTE']}/ios/project/#{ENV['XCODE_SCHEME_NAME']}/#{ENV['XCODE_SCHEME_NAME']}-Info.plist",
      key: "NSLocationWhenInUseUsageDescription",
      value: "Group Finder",
    )

    set_info_plist_value(
      path: "#{ENV['METEOR_OUTPUT_ABSOLUTE']}/ios/project/#{ENV['XCODE_SCHEME_NAME']}/#{ENV['XCODE_SCHEME_NAME']}-Info.plist",
      key: "ITSAppUsesNonExemptEncryption",
      value: "NO",
    )

    update_app_identifier(
      xcodeproj: "#{ENV['METEOR_OUTPUT_ABSOLUTE']}/ios/project/#{ENV['XCODE_SCHEME_NAME']}.xcodeproj",
      plist_path: "#{ENV['XCODE_SCHEME_NAME']}/#{ENV['XCODE_SCHEME_NAME']}-Info.plist",
      app_identifier: ENV['APP_IDENTIFIER'],
    )

    gym(
      project: "#{ENV['METEOR_OUTPUT_ABSOLUTE']}/ios/project/#{ENV['XCODE_SCHEME_NAME']}.xcodeproj",
      clean: true,
      scheme: ENV['XCODE_SCHEME_NAME'],
      include_bitcode: false,
      export_team_id: ENV['TEAM_ID'],
      codesigning_identity: ENV["CODESIGNING_IDENTITY"],
    )
  end

  desc "Just build the app"
  lane :build do
    build_app_production
  end

  desc "Install App Store Certificates"
  lane :certs do
    %w(appstore development).each do |e|
      match(
        type: e,
        git_url: ENV['CERTIFICATES_REPO'],
        app_identifier: [ "cc.newspring.newspringapp", "com.subsplashstudio31.NewSpring-Church" ],
        username: ENV["APPLE_ID"],
      )
    end
  end

  desc "Install Development Certificates"
  lane :dev do
    match(
      type: "development",
      git_url: ENV['CERTIFICATES_REPO'],
      app_identifier: [ "cc.newspring.newspringapp", "com.subsplashstudio31.NewSpring-Church" ],
      username: ENV["APPLE_ID"],
      force_for_new_devices: true,
    )
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    build_app_production

    pilot(
      username: ENV['APPLE_ID'],
      skip_waiting_for_build_processing: true,
      app_identifier: ENV['APP_IDENTIFIER'],
      changelog: ENV['RELEASE_NOTES'],
    )
  end

  desc "Deploy a new version to the App Store"
  lane :production do
    build_app_production

    deliver(
      username: ENV['APPLE_ID'],
      force: true,
      app_identifier: ENV['APP_IDENTIFIER'],
    )
  end
end

# vim: set ft=ruby
